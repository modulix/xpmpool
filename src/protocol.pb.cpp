// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pool {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Share_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Share_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Work_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Work_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_ErrType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  Block_descriptor_ = file->message_type(0);
  static const int Block_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, prevhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, reqdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, minshare_),
  };
  Block_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      -1,
      -1,
      sizeof(Block),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _internal_metadata_),
      -1);
  Signal_descriptor_ = file->message_type(1);
  static const int Signal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, block_),
  };
  Signal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      -1,
      -1,
      sizeof(Signal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _internal_metadata_),
      -1);
  Signal_Type_descriptor_ = Signal_descriptor_->enum_type(0);
  ClientStats_descriptor_ = file->message_type(2);
  static const int ClientStats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, cpd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, ngpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, height_),
  };
  ClientStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientStats_descriptor_,
      ClientStats::default_instance_,
      ClientStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClientStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, _internal_metadata_),
      -1);
  Share_descriptor_ = file->message_type(3);
  static const int Share_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, gpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, merkle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, blockhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, chaintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, isblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, genvalue_),
  };
  Share_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Share_descriptor_,
      Share::default_instance_,
      Share_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, _has_bits_[0]),
      -1,
      -1,
      sizeof(Share),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, _internal_metadata_),
      -1);
  Request_descriptor_ = file->message_type(4);
  static const int Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reqnonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, stats_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Request_Type_descriptor_ = Request_descriptor_->enum_type(0);
  ServerInfo_descriptor_ = file->message_type(5);
  static const int ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, target_),
  };
  ServerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _internal_metadata_),
      -1);
  Work_descriptor_ = file->message_type(6);
  static const int Work_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, merkle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, bits_),
  };
  Work_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Work_descriptor_,
      Work::default_instance_,
      Work_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, _has_bits_[0]),
      -1,
      -1,
      sizeof(Work),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, _internal_metadata_),
      -1);
  Reply_descriptor_ = file->message_type(7);
  static const int Reply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, errstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, sinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, block_),
  };
  Reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      -1,
      -1,
      sizeof(Reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _internal_metadata_),
      -1);
  Reply_ErrType_descriptor_ = Reply_descriptor_->enum_type(0);
  ReqStats_descriptor_ = file->message_type(8);
  static const int ReqStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, errtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, count_),
  };
  ReqStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqStats_descriptor_,
      ReqStats::default_instance_,
      ReqStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, _internal_metadata_),
      -1);
  ServerStats_descriptor_ = file->message_type(9);
  static const int ServerStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, cpd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, reqstats_),
  };
  ServerStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerStats_descriptor_,
      ServerStats::default_instance_,
      ServerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _internal_metadata_),
      -1);
  Data_descriptor_ = file->message_type(10);
  static const int Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, clientstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, serverstats_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      -1,
      -1,
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientStats_descriptor_, &ClientStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Share_descriptor_, &Share::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Work_descriptor_, &Work::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqStats_descriptor_, &ReqStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerStats_descriptor_, &ServerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, &Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete Block::default_instance_;
  delete Block_reflection_;
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete ClientStats::default_instance_;
  delete ClientStats_reflection_;
  delete Share::default_instance_;
  delete Share_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete Work::default_instance_;
  delete Work_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete ReqStats::default_instance_;
  delete ReqStats_reflection_;
  delete ServerStats::default_instance_;
  delete ServerStats_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\npool.proto\"Z\n\005Block\022\016\n"
    "\006height\030\001 \002(\r\022\014\n\004hash\030\002 \002(\t\022\020\n\010prevhash\030"
    "\003 \002(\t\022\017\n\007reqdiff\030\004 \002(\r\022\020\n\010minshare\030\005 \002(\r"
    "\"u\n\006Signal\022%\n\004type\030\001 \002(\0162\027.pool.proto.Si"
    "gnal.Type\022 \n\005block\030\002 \001(\0132\021.pool.proto.Bl"
    "ock\"\"\n\004Type\022\014\n\010NEWBLOCK\020\001\022\014\n\010SHUTDOWN\020\002\""
    "\273\001\n\013ClientStats\022\014\n\004addr\030\001 \002(\t\022\014\n\004name\030\002 "
    "\002(\t\022\020\n\010clientid\030\003 \002(\006\022\022\n\ninstanceid\030\004 \002("
    "\006\022\017\n\007version\030\n \002(\r\022\013\n\003cpd\030\013 \002(\002\022\017\n\007laten"
    "cy\030\014 \002(\r\022\014\n\004temp\030\r \002(\r\022\016\n\006errors\030\016 \002(\r\022\r"
    "\n\005ngpus\030\017 \002(\r\022\016\n\006height\030\020 \002(\r\"\205\002\n\005Share\022"
    "\014\n\004addr\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010clientid\030"
    "\003 \002(\006\022\r\n\005gpuid\030\004 \001(\r\022\014\n\004hash\030\n \002(\t\022\016\n\006me"
    "rkle\030\013 \002(\t\022\014\n\004time\030\014 \002(\r\022\014\n\004bits\030\r \002(\r\022\r"
    "\n\005nonce\030\016 \002(\r\022\r\n\005multi\030\017 \002(\t\022\021\n\tblockhas"
    "h\030\020 \001(\t\022\016\n\006height\030\024 \002(\r\022\016\n\006length\030\025 \002(\r\022"
    "\021\n\tchaintype\030\026 \002(\r\022\017\n\007isblock\030\027 \002(\010\022\020\n\010g"
    "envalue\030\030 \001(\004\"\211\002\n\007Request\022&\n\004type\030\001 \002(\0162"
    "\030.pool.proto.Request.Type\022\r\n\005reqid\030\002 \002(\r"
    "\022\017\n\007version\030\n \001(\r\022\016\n\006height\030\013 \001(\r\022\020\n\010req"
    "nonce\030\014 \001(\014\022 \n\005share\030\024 \001(\0132\021.pool.proto."
    "Share\022&\n\005stats\030\025 \001(\0132\027.pool.proto.Client"
    "Stats\"J\n\004Type\022\010\n\004NONE\020\000\022\013\n\007CONNECT\020\001\022\013\n\007"
    "GETWORK\020\002\022\t\n\005SHARE\020\003\022\t\n\005STATS\020\004\022\010\n\004PING\020"
    "\005\"G\n\nServerInfo\022\014\n\004host\030\001 \002(\t\022\016\n\006router\030"
    "\002 \002(\r\022\013\n\003pub\030\003 \002(\r\022\016\n\006target\030\004 \002(\r\"B\n\004Wo"
    "rk\022\016\n\006height\030\001 \002(\r\022\016\n\006merkle\030\002 \002(\t\022\014\n\004ti"
    "me\030\003 \002(\r\022\014\n\004bits\030\004 \002(\r\"\304\002\n\005Reply\022&\n\004type"
    "\030\001 \002(\0162\030.pool.proto.Request.Type\022\r\n\005reqi"
    "d\030\002 \002(\r\022(\n\005error\030\n \002(\0162\031.pool.proto.Repl"
    "y.ErrType\022\016\n\006errstr\030\013 \001(\t\022%\n\005sinfo\030\024 \001(\013"
    "2\026.pool.proto.ServerInfo\022\036\n\004work\030\025 \001(\0132\020"
    ".pool.proto.Work\022 \n\005block\030\026 \001(\0132\021.pool.p"
    "roto.Block\"a\n\007ErrType\022\010\n\004NONE\020\000\022\013\n\007VERSI"
    "ON\020\001\022\n\n\006HEIGHT\020\002\022\014\n\010REQNONCE\020\003\022\t\n\005STALE\020"
    "\004\022\013\n\007INVALID\020\005\022\r\n\tDUPLICATE\020\006\"p\n\010ReqStat"
    "s\022)\n\007reqtype\030\001 \002(\0162\030.pool.proto.Request."
    "Type\022*\n\007errtype\030\002 \002(\0162\031.pool.proto.Reply"
    ".ErrType\022\r\n\005count\030\003 \002(\r\"\202\001\n\013ServerStats\022"
    "\014\n\004name\030\001 \002(\t\022\016\n\006thread\030\002 \002(\r\022\017\n\007workers"
    "\030\n \002(\r\022\017\n\007latency\030\013 \002(\r\022\013\n\003cpd\030\014 \002(\002\022&\n\010"
    "reqstats\030\024 \003(\0132\024.pool.proto.ReqStats\"\204\001\n"
    "\004Data\022 \n\005share\030\001 \001(\0132\021.pool.proto.Share\022"
    ",\n\013clientstats\030\002 \001(\0132\027.pool.proto.Client"
    "Stats\022,\n\013serverstats\030\003 \001(\0132\027.pool.proto."
    "ServerStats", 1811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  Block::default_instance_ = new Block();
  Signal::default_instance_ = new Signal();
  ClientStats::default_instance_ = new ClientStats();
  Share::default_instance_ = new Share();
  Request::default_instance_ = new Request();
  ServerInfo::default_instance_ = new ServerInfo();
  Work::default_instance_ = new Work();
  Reply::default_instance_ = new Reply();
  ReqStats::default_instance_ = new ReqStats();
  ServerStats::default_instance_ = new ServerStats();
  Data::default_instance_ = new Data();
  Block::default_instance_->InitAsDefaultInstance();
  Signal::default_instance_->InitAsDefaultInstance();
  ClientStats::default_instance_->InitAsDefaultInstance();
  Share::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  Work::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  ReqStats::default_instance_->InitAsDefaultInstance();
  ServerStats::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kHeightFieldNumber;
const int Block::kHashFieldNumber;
const int Block::kPrevhashFieldNumber;
const int Block::kReqdiffFieldNumber;
const int Block::kMinshareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Block)
}

void Block::InitAsDefaultInstance() {
}

Block::Block(const Block& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Block)
}

void Block::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  height_ = 0u;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reqdiff_ = 0u;
  minshare_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:pool.proto.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Block)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Block, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Block*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(height_, reqdiff_);
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_prevhash()) {
      prevhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    minshare_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // required string hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Block.hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prevhash;
        break;
      }

      // required string prevhash = 3;
      case 3: {
        if (tag == 26) {
         parse_prevhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prevhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prevhash().data(), this->prevhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Block.prevhash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reqdiff;
        break;
      }

      // required uint32 reqdiff = 4;
      case 4: {
        if (tag == 32) {
         parse_reqdiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqdiff_)));
          set_has_reqdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minshare;
        break;
      }

      // required uint32 minshare = 5;
      case 5: {
        if (tag == 40) {
         parse_minshare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minshare_)));
          set_has_minshare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Block)
  // required uint32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // required string prevhash = 3;
  if (has_prevhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prevhash().data(), this->prevhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.prevhash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prevhash(), output);
  }

  // required uint32 reqdiff = 4;
  if (has_reqdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqdiff(), output);
  }

  // required uint32 minshare = 5;
  if (has_minshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minshare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Block)
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Block)
  // required uint32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // required string prevhash = 3;
  if (has_prevhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prevhash().data(), this->prevhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.prevhash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prevhash(), target);
  }

  // required uint32 reqdiff = 4;
  if (has_reqdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqdiff(), target);
  }

  // required uint32 minshare = 5;
  if (has_minshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minshare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Block)
  return target;
}

int Block::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Block)
  int total_size = 0;

  if (has_height()) {
    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_hash()) {
    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_prevhash()) {
    // required string prevhash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prevhash());
  }

  if (has_reqdiff()) {
    // required uint32 reqdiff = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqdiff());
  }

  if (has_minshare()) {
    // required uint32 minshare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minshare());
  }

  return total_size;
}
int Block::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Block)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required string prevhash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prevhash());

    // required uint32 reqdiff = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqdiff());

    // required uint32 minshare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minshare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Block)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Block* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Block)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_prevhash()) {
      set_has_prevhash();
      prevhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prevhash_);
    }
    if (from.has_reqdiff()) {
      set_reqdiff(from.reqdiff());
    }
    if (from.has_minshare()) {
      set_minshare(from.minshare());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  std::swap(height_, other->height_);
  hash_.Swap(&other->hash_);
  prevhash_.Swap(&other->prevhash_);
  std::swap(reqdiff_, other->reqdiff_);
  std::swap(minshare_, other->minshare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// required uint32 height = 1;
bool Block::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Block::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void Block::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void Block::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 Block::height() const {
  // @@protoc_insertion_point(field_get:pool.proto.Block.height)
  return height_;
}
 void Block::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Block.height)
}

// required string hash = 2;
bool Block::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Block::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Block::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Block::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& Block::hash() const {
  // @@protoc_insertion_point(field_get:pool.proto.Block.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Block.hash)
}
 void Block::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Block.hash)
}
 void Block::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Block.hash)
}
 ::std::string* Block::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:pool.proto.Block.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_hash() {
  // @@protoc_insertion_point(field_release:pool.proto.Block.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Block.hash)
}

// required string prevhash = 3;
bool Block::has_prevhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Block::set_has_prevhash() {
  _has_bits_[0] |= 0x00000004u;
}
void Block::clear_has_prevhash() {
  _has_bits_[0] &= ~0x00000004u;
}
void Block::clear_prevhash() {
  prevhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prevhash();
}
 const ::std::string& Block::prevhash() const {
  // @@protoc_insertion_point(field_get:pool.proto.Block.prevhash)
  return prevhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_prevhash(const ::std::string& value) {
  set_has_prevhash();
  prevhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Block.prevhash)
}
 void Block::set_prevhash(const char* value) {
  set_has_prevhash();
  prevhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Block.prevhash)
}
 void Block::set_prevhash(const char* value, size_t size) {
  set_has_prevhash();
  prevhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Block.prevhash)
}
 ::std::string* Block::mutable_prevhash() {
  set_has_prevhash();
  // @@protoc_insertion_point(field_mutable:pool.proto.Block.prevhash)
  return prevhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_prevhash() {
  // @@protoc_insertion_point(field_release:pool.proto.Block.prevhash)
  clear_has_prevhash();
  return prevhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_prevhash(::std::string* prevhash) {
  if (prevhash != NULL) {
    set_has_prevhash();
  } else {
    clear_has_prevhash();
  }
  prevhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prevhash);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Block.prevhash)
}

// required uint32 reqdiff = 4;
bool Block::has_reqdiff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Block::set_has_reqdiff() {
  _has_bits_[0] |= 0x00000008u;
}
void Block::clear_has_reqdiff() {
  _has_bits_[0] &= ~0x00000008u;
}
void Block::clear_reqdiff() {
  reqdiff_ = 0u;
  clear_has_reqdiff();
}
 ::google::protobuf::uint32 Block::reqdiff() const {
  // @@protoc_insertion_point(field_get:pool.proto.Block.reqdiff)
  return reqdiff_;
}
 void Block::set_reqdiff(::google::protobuf::uint32 value) {
  set_has_reqdiff();
  reqdiff_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Block.reqdiff)
}

// required uint32 minshare = 5;
bool Block::has_minshare() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Block::set_has_minshare() {
  _has_bits_[0] |= 0x00000010u;
}
void Block::clear_has_minshare() {
  _has_bits_[0] &= ~0x00000010u;
}
void Block::clear_minshare() {
  minshare_ = 0u;
  clear_has_minshare();
}
 ::google::protobuf::uint32 Block::minshare() const {
  // @@protoc_insertion_point(field_get:pool.proto.Block.minshare)
  return minshare_;
}
 void Block::set_minshare(::google::protobuf::uint32 value) {
  set_has_minshare();
  minshare_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Block.minshare)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_Type_descriptor_;
}
bool Signal_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::NEWBLOCK;
const Signal_Type Signal::SHUTDOWN;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kTypeFieldNumber;
const int Signal::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Signal)
}

void Signal::InitAsDefaultInstance() {
  block_ = const_cast< ::pool::proto::Block*>(&::pool::proto::Block::default_instance());
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Signal)
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:pool.proto.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Signal)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    if (has_block()) {
      if (block_ != NULL) block_->::pool::proto::Block::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Signal.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Signal_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_block;
        break;
      }

      // optional .pool.proto.Block block = 2;
      case 2: {
        if (tag == 18) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Signal)
  // required .pool.proto.Signal.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pool.proto.Block block = 2;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->block_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Signal)
}

::google::protobuf::uint8* Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Signal)
  // required .pool.proto.Signal.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pool.proto.Block block = 2;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->block_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Signal)
  return target;
}

int Signal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Signal)
  int total_size = 0;

  // required .pool.proto.Signal.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .pool.proto.Block block = 2;
  if (has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Signal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Signal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Signal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_block()) {
      mutable_block()->::pool::proto::Block::MergeFrom(from.block());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_block()) {
    if (!this->block_->IsInitialized()) return false;
  }
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  std::swap(type_, other->type_);
  std::swap(block_, other->block_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// required .pool.proto.Signal.Type type = 1;
bool Signal::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signal::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Signal::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signal::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::pool::proto::Signal_Type Signal::type() const {
  // @@protoc_insertion_point(field_get:pool.proto.Signal.type)
  return static_cast< ::pool::proto::Signal_Type >(type_);
}
 void Signal::set_type(::pool::proto::Signal_Type value) {
  assert(::pool::proto::Signal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Signal.type)
}

// optional .pool.proto.Block block = 2;
bool Signal::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signal::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
void Signal::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signal::clear_block() {
  if (block_ != NULL) block_->::pool::proto::Block::Clear();
  clear_has_block();
}
const ::pool::proto::Block& Signal::block() const {
  // @@protoc_insertion_point(field_get:pool.proto.Signal.block)
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
::pool::proto::Block* Signal::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    block_ = new ::pool::proto::Block;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Signal.block)
  return block_;
}
::pool::proto::Block* Signal::release_block() {
  // @@protoc_insertion_point(field_release:pool.proto.Signal.block)
  clear_has_block();
  ::pool::proto::Block* temp = block_;
  block_ = NULL;
  return temp;
}
void Signal::set_allocated_block(::pool::proto::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Signal.block)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientStats::kAddrFieldNumber;
const int ClientStats::kNameFieldNumber;
const int ClientStats::kClientidFieldNumber;
const int ClientStats::kInstanceidFieldNumber;
const int ClientStats::kVersionFieldNumber;
const int ClientStats::kCpdFieldNumber;
const int ClientStats::kLatencyFieldNumber;
const int ClientStats::kTempFieldNumber;
const int ClientStats::kErrorsFieldNumber;
const int ClientStats::kNgpusFieldNumber;
const int ClientStats::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientStats::ClientStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ClientStats)
}

void ClientStats::InitAsDefaultInstance() {
}

ClientStats::ClientStats(const ClientStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.ClientStats)
}

void ClientStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = GOOGLE_ULONGLONG(0);
  instanceid_ = GOOGLE_ULONGLONG(0);
  version_ = 0u;
  cpd_ = 0;
  latency_ = 0u;
  temp_ = 0u;
  errors_ = 0u;
  ngpus_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientStats::~ClientStats() {
  // @@protoc_insertion_point(destructor:pool.proto.ClientStats)
  SharedDtor();
}

void ClientStats::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClientStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStats_descriptor_;
}

const ClientStats& ClientStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ClientStats* ClientStats::default_instance_ = NULL;

ClientStats* ClientStats::New(::google::protobuf::Arena* arena) const {
  ClientStats* n = new ClientStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ClientStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClientStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(clientid_, temp_);
    if (has_addr()) {
      addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(errors_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ClientStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ClientStats.addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ClientStats.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_clientid;
        break;
      }

      // required fixed64 clientid = 3;
      case 3: {
        if (tag == 25) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_instanceid;
        break;
      }

      // required fixed64 instanceid = 4;
      case 4: {
        if (tag == 33) {
         parse_instanceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }

      // required uint32 version = 10;
      case 10: {
        if (tag == 80) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_cpd;
        break;
      }

      // required float cpd = 11;
      case 11: {
        if (tag == 93) {
         parse_cpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpd_)));
          set_has_cpd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_latency;
        break;
      }

      // required uint32 latency = 12;
      case 12: {
        if (tag == 96) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_temp;
        break;
      }

      // required uint32 temp = 13;
      case 13: {
        if (tag == 104) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_errors;
        break;
      }

      // required uint32 errors = 14;
      case 14: {
        if (tag == 112) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
          set_has_errors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ngpus;
        break;
      }

      // required uint32 ngpus = 15;
      case 15: {
        if (tag == 120) {
         parse_ngpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngpus_)));
          set_has_ngpus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_height;
        break;
      }

      // required uint32 height = 16;
      case 16: {
        if (tag == 128) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ClientStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ClientStats)
  return false;
#undef DO_
}

void ClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ClientStats)
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clientid(), output);
  }

  // required fixed64 instanceid = 4;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->instanceid(), output);
  }

  // required uint32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  // required float cpd = 11;
  if (has_cpd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cpd(), output);
  }

  // required uint32 latency = 12;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->latency(), output);
  }

  // required uint32 temp = 13;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->temp(), output);
  }

  // required uint32 errors = 14;
  if (has_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->errors(), output);
  }

  // required uint32 ngpus = 15;
  if (has_ngpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ngpus(), output);
  }

  // required uint32 height = 16;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ClientStats)
}

::google::protobuf::uint8* ClientStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ClientStats)
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clientid(), target);
  }

  // required fixed64 instanceid = 4;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->instanceid(), target);
  }

  // required uint32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  // required float cpd = 11;
  if (has_cpd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cpd(), target);
  }

  // required uint32 latency = 12;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->latency(), target);
  }

  // required uint32 temp = 13;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->temp(), target);
  }

  // required uint32 errors = 14;
  if (has_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->errors(), target);
  }

  // required uint32 ngpus = 15;
  if (has_ngpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ngpus(), target);
  }

  // required uint32 height = 16;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ClientStats)
  return target;
}

int ClientStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ClientStats)
  int total_size = 0;

  if (has_addr()) {
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_clientid()) {
    // required fixed64 clientid = 3;
    total_size += 1 + 8;
  }

  if (has_instanceid()) {
    // required fixed64 instanceid = 4;
    total_size += 1 + 8;
  }

  if (has_version()) {
    // required uint32 version = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_cpd()) {
    // required float cpd = 11;
    total_size += 1 + 4;
  }

  if (has_latency()) {
    // required uint32 latency = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  if (has_temp()) {
    // required uint32 temp = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temp());
  }

  if (has_errors()) {
    // required uint32 errors = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());
  }

  if (has_ngpus()) {
    // required uint32 ngpus = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngpus());
  }

  if (has_height()) {
    // required uint32 height = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
int ClientStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ClientStats)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required fixed64 clientid = 3;
    total_size += 1 + 8;

    // required fixed64 instanceid = 4;
    total_size += 1 + 8;

    // required uint32 version = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required float cpd = 11;
    total_size += 1 + 4;

    // required uint32 latency = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());

    // required uint32 temp = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temp());

    // required uint32 errors = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());

    // required uint32 ngpus = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngpus());

    // required uint32 height = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ClientStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ClientStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ClientStats)
    MergeFrom(*source);
  }
}

void ClientStats::MergeFrom(const ClientStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ClientStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_cpd()) {
      set_cpd(from.cpd());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errors()) {
      set_errors(from.errors());
    }
    if (from.has_ngpus()) {
      set_ngpus(from.ngpus());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClientStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStats::CopyFrom(const ClientStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void ClientStats::Swap(ClientStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStats::InternalSwap(ClientStats* other) {
  addr_.Swap(&other->addr_);
  name_.Swap(&other->name_);
  std::swap(clientid_, other->clientid_);
  std::swap(instanceid_, other->instanceid_);
  std::swap(version_, other->version_);
  std::swap(cpd_, other->cpd_);
  std::swap(latency_, other->latency_);
  std::swap(temp_, other->temp_);
  std::swap(errors_, other->errors_);
  std::swap(ngpus_, other->ngpus_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStats_descriptor_;
  metadata.reflection = ClientStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStats

// required string addr = 1;
bool ClientStats::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientStats::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientStats::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientStats::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
 const ::std::string& ClientStats::addr() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientStats::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.addr)
}
 void ClientStats::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.ClientStats.addr)
}
 void ClientStats::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.ClientStats.addr)
}
 ::std::string* ClientStats::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:pool.proto.ClientStats.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientStats::release_addr() {
  // @@protoc_insertion_point(field_release:pool.proto.ClientStats.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientStats::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.ClientStats.addr)
}

// required string name = 2;
bool ClientStats::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientStats::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ClientStats::name() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.name)
}
 void ClientStats::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.ClientStats.name)
}
 void ClientStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.ClientStats.name)
}
 ::std::string* ClientStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pool.proto.ClientStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientStats::release_name() {
  // @@protoc_insertion_point(field_release:pool.proto.ClientStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.ClientStats.name)
}

// required fixed64 clientid = 3;
bool ClientStats::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientStats::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientStats::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientStats::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
 ::google::protobuf::uint64 ClientStats::clientid() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.clientid)
  return clientid_;
}
 void ClientStats::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.clientid)
}

// required fixed64 instanceid = 4;
bool ClientStats::has_instanceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientStats::set_has_instanceid() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientStats::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientStats::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
 ::google::protobuf::uint64 ClientStats::instanceid() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.instanceid)
  return instanceid_;
}
 void ClientStats::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.instanceid)
}

// required uint32 version = 10;
bool ClientStats::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientStats::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 ClientStats::version() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.version)
  return version_;
}
 void ClientStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.version)
}

// required float cpd = 11;
bool ClientStats::has_cpd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientStats::set_has_cpd() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientStats::clear_has_cpd() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientStats::clear_cpd() {
  cpd_ = 0;
  clear_has_cpd();
}
 float ClientStats::cpd() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.cpd)
  return cpd_;
}
 void ClientStats::set_cpd(float value) {
  set_has_cpd();
  cpd_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.cpd)
}

// required uint32 latency = 12;
bool ClientStats::has_latency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientStats::set_has_latency() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientStats::clear_has_latency() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientStats::clear_latency() {
  latency_ = 0u;
  clear_has_latency();
}
 ::google::protobuf::uint32 ClientStats::latency() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.latency)
  return latency_;
}
 void ClientStats::set_latency(::google::protobuf::uint32 value) {
  set_has_latency();
  latency_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.latency)
}

// required uint32 temp = 13;
bool ClientStats::has_temp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientStats::set_has_temp() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientStats::clear_has_temp() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientStats::clear_temp() {
  temp_ = 0u;
  clear_has_temp();
}
 ::google::protobuf::uint32 ClientStats::temp() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.temp)
  return temp_;
}
 void ClientStats::set_temp(::google::protobuf::uint32 value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.temp)
}

// required uint32 errors = 14;
bool ClientStats::has_errors() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClientStats::set_has_errors() {
  _has_bits_[0] |= 0x00000100u;
}
void ClientStats::clear_has_errors() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClientStats::clear_errors() {
  errors_ = 0u;
  clear_has_errors();
}
 ::google::protobuf::uint32 ClientStats::errors() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.errors)
  return errors_;
}
 void ClientStats::set_errors(::google::protobuf::uint32 value) {
  set_has_errors();
  errors_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.errors)
}

// required uint32 ngpus = 15;
bool ClientStats::has_ngpus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ClientStats::set_has_ngpus() {
  _has_bits_[0] |= 0x00000200u;
}
void ClientStats::clear_has_ngpus() {
  _has_bits_[0] &= ~0x00000200u;
}
void ClientStats::clear_ngpus() {
  ngpus_ = 0u;
  clear_has_ngpus();
}
 ::google::protobuf::uint32 ClientStats::ngpus() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.ngpus)
  return ngpus_;
}
 void ClientStats::set_ngpus(::google::protobuf::uint32 value) {
  set_has_ngpus();
  ngpus_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.ngpus)
}

// required uint32 height = 16;
bool ClientStats::has_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ClientStats::set_has_height() {
  _has_bits_[0] |= 0x00000400u;
}
void ClientStats::clear_has_height() {
  _has_bits_[0] &= ~0x00000400u;
}
void ClientStats::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 ClientStats::height() const {
  // @@protoc_insertion_point(field_get:pool.proto.ClientStats.height)
  return height_;
}
 void ClientStats::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ClientStats.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Share::kAddrFieldNumber;
const int Share::kNameFieldNumber;
const int Share::kClientidFieldNumber;
const int Share::kGpuidFieldNumber;
const int Share::kHashFieldNumber;
const int Share::kMerkleFieldNumber;
const int Share::kTimeFieldNumber;
const int Share::kBitsFieldNumber;
const int Share::kNonceFieldNumber;
const int Share::kMultiFieldNumber;
const int Share::kBlockhashFieldNumber;
const int Share::kHeightFieldNumber;
const int Share::kLengthFieldNumber;
const int Share::kChaintypeFieldNumber;
const int Share::kIsblockFieldNumber;
const int Share::kGenvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Share::Share()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Share)
}

void Share::InitAsDefaultInstance() {
}

Share::Share(const Share& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Share)
}

void Share::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = GOOGLE_ULONGLONG(0);
  gpuid_ = 0u;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  bits_ = 0u;
  nonce_ = 0u;
  multi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
  length_ = 0u;
  chaintype_ = 0u;
  isblock_ = false;
  genvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Share::~Share() {
  // @@protoc_insertion_point(destructor:pool.proto.Share)
  SharedDtor();
}

void Share::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Share::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Share::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Share_descriptor_;
}

const Share& Share::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Share* Share::default_instance_ = NULL;

Share* Share::New(::google::protobuf::Arena* arena) const {
  Share* n = new Share;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Share::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Share)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Share, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Share*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gpuid_, time_);
    if (has_addr()) {
      addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_merkle()) {
      merkle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bits_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(height_, genvalue_);
    nonce_ = 0u;
    if (has_multi()) {
      multi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_blockhash()) {
      blockhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Share::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Share)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_clientid;
        break;
      }

      // required fixed64 clientid = 3;
      case 3: {
        if (tag == 25) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gpuid;
        break;
      }

      // optional uint32 gpuid = 4;
      case 4: {
        if (tag == 32) {
         parse_gpuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpuid_)));
          set_has_gpuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_hash;
        break;
      }

      // required string hash = 10;
      case 10: {
        if (tag == 82) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_merkle;
        break;
      }

      // required string merkle = 11;
      case 11: {
        if (tag == 90) {
         parse_merkle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->merkle().data(), this->merkle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.merkle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time;
        break;
      }

      // required uint32 time = 12;
      case 12: {
        if (tag == 96) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bits;
        break;
      }

      // required uint32 bits = 13;
      case 13: {
        if (tag == 104) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nonce;
        break;
      }

      // required uint32 nonce = 14;
      case 14: {
        if (tag == 112) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_multi;
        break;
      }

      // required string multi = 15;
      case 15: {
        if (tag == 122) {
         parse_multi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multi().data(), this->multi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.multi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_blockhash;
        break;
      }

      // optional string blockhash = 16;
      case 16: {
        if (tag == 130) {
         parse_blockhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockhash().data(), this->blockhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.blockhash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_height;
        break;
      }

      // required uint32 height = 20;
      case 20: {
        if (tag == 160) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_length;
        break;
      }

      // required uint32 length = 21;
      case 21: {
        if (tag == 168) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_chaintype;
        break;
      }

      // required uint32 chaintype = 22;
      case 22: {
        if (tag == 176) {
         parse_chaintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chaintype_)));
          set_has_chaintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_isblock;
        break;
      }

      // required bool isblock = 23;
      case 23: {
        if (tag == 184) {
         parse_isblock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblock_)));
          set_has_isblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_genvalue;
        break;
      }

      // optional uint64 genvalue = 24;
      case 24: {
        if (tag == 192) {
         parse_genvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &genvalue_)));
          set_has_genvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Share)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Share)
  return false;
#undef DO_
}

void Share::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Share)
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clientid(), output);
  }

  // optional uint32 gpuid = 4;
  if (has_gpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gpuid(), output);
  }

  // required string hash = 10;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->hash(), output);
  }

  // required string merkle = 11;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.merkle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->merkle(), output);
  }

  // required uint32 time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time(), output);
  }

  // required uint32 bits = 13;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bits(), output);
  }

  // required uint32 nonce = 14;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nonce(), output);
  }

  // required string multi = 15;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi().data(), this->multi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.multi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->multi(), output);
  }

  // optional string blockhash = 16;
  if (has_blockhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockhash().data(), this->blockhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.blockhash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->blockhash(), output);
  }

  // required uint32 height = 20;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->height(), output);
  }

  // required uint32 length = 21;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->length(), output);
  }

  // required uint32 chaintype = 22;
  if (has_chaintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->chaintype(), output);
  }

  // required bool isblock = 23;
  if (has_isblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isblock(), output);
  }

  // optional uint64 genvalue = 24;
  if (has_genvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->genvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Share)
}

::google::protobuf::uint8* Share::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Share)
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clientid(), target);
  }

  // optional uint32 gpuid = 4;
  if (has_gpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gpuid(), target);
  }

  // required string hash = 10;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hash(), target);
  }

  // required string merkle = 11;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.merkle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->merkle(), target);
  }

  // required uint32 time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time(), target);
  }

  // required uint32 bits = 13;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->bits(), target);
  }

  // required uint32 nonce = 14;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nonce(), target);
  }

  // required string multi = 15;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi().data(), this->multi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.multi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->multi(), target);
  }

  // optional string blockhash = 16;
  if (has_blockhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockhash().data(), this->blockhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.blockhash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->blockhash(), target);
  }

  // required uint32 height = 20;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->height(), target);
  }

  // required uint32 length = 21;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->length(), target);
  }

  // required uint32 chaintype = 22;
  if (has_chaintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->chaintype(), target);
  }

  // required bool isblock = 23;
  if (has_isblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isblock(), target);
  }

  // optional uint64 genvalue = 24;
  if (has_genvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->genvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Share)
  return target;
}

int Share::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Share)
  int total_size = 0;

  if (has_addr()) {
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_clientid()) {
    // required fixed64 clientid = 3;
    total_size += 1 + 8;
  }

  if (has_hash()) {
    // required string hash = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_merkle()) {
    // required string merkle = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());
  }

  if (has_time()) {
    // required uint32 time = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_bits()) {
    // required uint32 bits = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());
  }

  if (has_nonce()) {
    // required uint32 nonce = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nonce());
  }

  if (has_multi()) {
    // required string multi = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multi());
  }

  if (has_height()) {
    // required uint32 height = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_length()) {
    // required uint32 length = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  if (has_chaintype()) {
    // required uint32 chaintype = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chaintype());
  }

  if (has_isblock()) {
    // required bool isblock = 23;
    total_size += 2 + 1;
  }

  return total_size;
}
int Share::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Share)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00007bf7) ^ 0x00007bf7) == 0) {  // All required fields are present.
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required fixed64 clientid = 3;
    total_size += 1 + 8;

    // required string hash = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required string merkle = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());

    // required uint32 time = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 bits = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());

    // required uint32 nonce = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nonce());

    // required string multi = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multi());

    // required uint32 height = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 length = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

    // required uint32 chaintype = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chaintype());

    // required bool isblock = 23;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 gpuid = 4;
  if (has_gpuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gpuid());
  }

  if (_has_bits_[10 / 32] & 33792u) {
    // optional string blockhash = 16;
    if (has_blockhash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockhash());
    }

    // optional uint64 genvalue = 24;
    if (has_genvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->genvalue());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Share::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Share)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Share* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Share>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Share)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Share)
    MergeFrom(*source);
  }
}

void Share::MergeFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Share)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gpuid()) {
      set_gpuid(from.gpuid());
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_merkle()) {
      set_has_merkle();
      merkle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_multi()) {
      set_has_multi();
      multi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multi_);
    }
    if (from.has_blockhash()) {
      set_has_blockhash();
      blockhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockhash_);
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_chaintype()) {
      set_chaintype(from.chaintype());
    }
    if (from.has_isblock()) {
      set_isblock(from.isblock());
    }
    if (from.has_genvalue()) {
      set_genvalue(from.genvalue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Share::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Share::CopyFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Share::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007bf7) != 0x00007bf7) return false;

  return true;
}

void Share::Swap(Share* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Share::InternalSwap(Share* other) {
  addr_.Swap(&other->addr_);
  name_.Swap(&other->name_);
  std::swap(clientid_, other->clientid_);
  std::swap(gpuid_, other->gpuid_);
  hash_.Swap(&other->hash_);
  merkle_.Swap(&other->merkle_);
  std::swap(time_, other->time_);
  std::swap(bits_, other->bits_);
  std::swap(nonce_, other->nonce_);
  multi_.Swap(&other->multi_);
  blockhash_.Swap(&other->blockhash_);
  std::swap(height_, other->height_);
  std::swap(length_, other->length_);
  std::swap(chaintype_, other->chaintype_);
  std::swap(isblock_, other->isblock_);
  std::swap(genvalue_, other->genvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Share::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Share_descriptor_;
  metadata.reflection = Share_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Share

// required string addr = 1;
bool Share::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Share::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void Share::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Share::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
 const ::std::string& Share::addr() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Share.addr)
}
 void Share::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Share.addr)
}
 void Share::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Share.addr)
}
 ::std::string* Share::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:pool.proto.Share.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Share::release_addr() {
  // @@protoc_insertion_point(field_release:pool.proto.Share.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Share.addr)
}

// required string name = 2;
bool Share::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Share::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Share::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Share::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Share::name() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Share.name)
}
 void Share::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Share.name)
}
 void Share::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Share.name)
}
 ::std::string* Share::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pool.proto.Share.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Share::release_name() {
  // @@protoc_insertion_point(field_release:pool.proto.Share.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Share.name)
}

// required fixed64 clientid = 3;
bool Share::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Share::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
void Share::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Share::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
 ::google::protobuf::uint64 Share::clientid() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.clientid)
  return clientid_;
}
 void Share::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.clientid)
}

// optional uint32 gpuid = 4;
bool Share::has_gpuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Share::set_has_gpuid() {
  _has_bits_[0] |= 0x00000008u;
}
void Share::clear_has_gpuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Share::clear_gpuid() {
  gpuid_ = 0u;
  clear_has_gpuid();
}
 ::google::protobuf::uint32 Share::gpuid() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.gpuid)
  return gpuid_;
}
 void Share::set_gpuid(::google::protobuf::uint32 value) {
  set_has_gpuid();
  gpuid_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.gpuid)
}

// required string hash = 10;
bool Share::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Share::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
void Share::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
void Share::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& Share::hash() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Share.hash)
}
 void Share::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Share.hash)
}
 void Share::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Share.hash)
}
 ::std::string* Share::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:pool.proto.Share.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Share::release_hash() {
  // @@protoc_insertion_point(field_release:pool.proto.Share.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Share.hash)
}

// required string merkle = 11;
bool Share::has_merkle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Share::set_has_merkle() {
  _has_bits_[0] |= 0x00000020u;
}
void Share::clear_has_merkle() {
  _has_bits_[0] &= ~0x00000020u;
}
void Share::clear_merkle() {
  merkle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merkle();
}
 const ::std::string& Share::merkle() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.merkle)
  return merkle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_merkle(const ::std::string& value) {
  set_has_merkle();
  merkle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Share.merkle)
}
 void Share::set_merkle(const char* value) {
  set_has_merkle();
  merkle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Share.merkle)
}
 void Share::set_merkle(const char* value, size_t size) {
  set_has_merkle();
  merkle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Share.merkle)
}
 ::std::string* Share::mutable_merkle() {
  set_has_merkle();
  // @@protoc_insertion_point(field_mutable:pool.proto.Share.merkle)
  return merkle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Share::release_merkle() {
  // @@protoc_insertion_point(field_release:pool.proto.Share.merkle)
  clear_has_merkle();
  return merkle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_allocated_merkle(::std::string* merkle) {
  if (merkle != NULL) {
    set_has_merkle();
  } else {
    clear_has_merkle();
  }
  merkle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Share.merkle)
}

// required uint32 time = 12;
bool Share::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Share::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Share::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Share::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 Share::time() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.time)
  return time_;
}
 void Share::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.time)
}

// required uint32 bits = 13;
bool Share::has_bits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Share::set_has_bits() {
  _has_bits_[0] |= 0x00000080u;
}
void Share::clear_has_bits() {
  _has_bits_[0] &= ~0x00000080u;
}
void Share::clear_bits() {
  bits_ = 0u;
  clear_has_bits();
}
 ::google::protobuf::uint32 Share::bits() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.bits)
  return bits_;
}
 void Share::set_bits(::google::protobuf::uint32 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.bits)
}

// required uint32 nonce = 14;
bool Share::has_nonce() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Share::set_has_nonce() {
  _has_bits_[0] |= 0x00000100u;
}
void Share::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000100u;
}
void Share::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
 ::google::protobuf::uint32 Share::nonce() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.nonce)
  return nonce_;
}
 void Share::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.nonce)
}

// required string multi = 15;
bool Share::has_multi() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Share::set_has_multi() {
  _has_bits_[0] |= 0x00000200u;
}
void Share::clear_has_multi() {
  _has_bits_[0] &= ~0x00000200u;
}
void Share::clear_multi() {
  multi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_multi();
}
 const ::std::string& Share::multi() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.multi)
  return multi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_multi(const ::std::string& value) {
  set_has_multi();
  multi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Share.multi)
}
 void Share::set_multi(const char* value) {
  set_has_multi();
  multi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Share.multi)
}
 void Share::set_multi(const char* value, size_t size) {
  set_has_multi();
  multi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Share.multi)
}
 ::std::string* Share::mutable_multi() {
  set_has_multi();
  // @@protoc_insertion_point(field_mutable:pool.proto.Share.multi)
  return multi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Share::release_multi() {
  // @@protoc_insertion_point(field_release:pool.proto.Share.multi)
  clear_has_multi();
  return multi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_allocated_multi(::std::string* multi) {
  if (multi != NULL) {
    set_has_multi();
  } else {
    clear_has_multi();
  }
  multi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multi);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Share.multi)
}

// optional string blockhash = 16;
bool Share::has_blockhash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Share::set_has_blockhash() {
  _has_bits_[0] |= 0x00000400u;
}
void Share::clear_has_blockhash() {
  _has_bits_[0] &= ~0x00000400u;
}
void Share::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blockhash();
}
 const ::std::string& Share::blockhash() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.blockhash)
  return blockhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_blockhash(const ::std::string& value) {
  set_has_blockhash();
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Share.blockhash)
}
 void Share::set_blockhash(const char* value) {
  set_has_blockhash();
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Share.blockhash)
}
 void Share::set_blockhash(const char* value, size_t size) {
  set_has_blockhash();
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Share.blockhash)
}
 ::std::string* Share::mutable_blockhash() {
  set_has_blockhash();
  // @@protoc_insertion_point(field_mutable:pool.proto.Share.blockhash)
  return blockhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Share::release_blockhash() {
  // @@protoc_insertion_point(field_release:pool.proto.Share.blockhash)
  clear_has_blockhash();
  return blockhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Share::set_allocated_blockhash(::std::string* blockhash) {
  if (blockhash != NULL) {
    set_has_blockhash();
  } else {
    clear_has_blockhash();
  }
  blockhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Share.blockhash)
}

// required uint32 height = 20;
bool Share::has_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Share::set_has_height() {
  _has_bits_[0] |= 0x00000800u;
}
void Share::clear_has_height() {
  _has_bits_[0] &= ~0x00000800u;
}
void Share::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 Share::height() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.height)
  return height_;
}
 void Share::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.height)
}

// required uint32 length = 21;
bool Share::has_length() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Share::set_has_length() {
  _has_bits_[0] |= 0x00001000u;
}
void Share::clear_has_length() {
  _has_bits_[0] &= ~0x00001000u;
}
void Share::clear_length() {
  length_ = 0u;
  clear_has_length();
}
 ::google::protobuf::uint32 Share::length() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.length)
  return length_;
}
 void Share::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.length)
}

// required uint32 chaintype = 22;
bool Share::has_chaintype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Share::set_has_chaintype() {
  _has_bits_[0] |= 0x00002000u;
}
void Share::clear_has_chaintype() {
  _has_bits_[0] &= ~0x00002000u;
}
void Share::clear_chaintype() {
  chaintype_ = 0u;
  clear_has_chaintype();
}
 ::google::protobuf::uint32 Share::chaintype() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.chaintype)
  return chaintype_;
}
 void Share::set_chaintype(::google::protobuf::uint32 value) {
  set_has_chaintype();
  chaintype_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.chaintype)
}

// required bool isblock = 23;
bool Share::has_isblock() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Share::set_has_isblock() {
  _has_bits_[0] |= 0x00004000u;
}
void Share::clear_has_isblock() {
  _has_bits_[0] &= ~0x00004000u;
}
void Share::clear_isblock() {
  isblock_ = false;
  clear_has_isblock();
}
 bool Share::isblock() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.isblock)
  return isblock_;
}
 void Share::set_isblock(bool value) {
  set_has_isblock();
  isblock_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.isblock)
}

// optional uint64 genvalue = 24;
bool Share::has_genvalue() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Share::set_has_genvalue() {
  _has_bits_[0] |= 0x00008000u;
}
void Share::clear_has_genvalue() {
  _has_bits_[0] &= ~0x00008000u;
}
void Share::clear_genvalue() {
  genvalue_ = GOOGLE_ULONGLONG(0);
  clear_has_genvalue();
}
 ::google::protobuf::uint64 Share::genvalue() const {
  // @@protoc_insertion_point(field_get:pool.proto.Share.genvalue)
  return genvalue_;
}
 void Share::set_genvalue(::google::protobuf::uint64 value) {
  set_has_genvalue();
  genvalue_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Share.genvalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Type_descriptor_;
}
bool Request_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_Type Request::NONE;
const Request_Type Request::CONNECT;
const Request_Type Request::GETWORK;
const Request_Type Request::SHARE;
const Request_Type Request::STATS;
const Request_Type Request::PING;
const Request_Type Request::Type_MIN;
const Request_Type Request::Type_MAX;
const int Request::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kTypeFieldNumber;
const int Request::kReqidFieldNumber;
const int Request::kVersionFieldNumber;
const int Request::kHeightFieldNumber;
const int Request::kReqnonceFieldNumber;
const int Request::kShareFieldNumber;
const int Request::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Request)
}

void Request::InitAsDefaultInstance() {
  share_ = const_cast< ::pool::proto::Share*>(&::pool::proto::Share::default_instance());
  stats_ = const_cast< ::pool::proto::ClientStats*>(&::pool::proto::ClientStats::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  reqid_ = 0u;
  version_ = 0u;
  height_ = 0u;
  reqnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_ = NULL;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:pool.proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  reqnonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete share_;
    delete stats_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(type_, height_);
    if (has_reqnonce()) {
      reqnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_share()) {
      if (share_ != NULL) share_->::pool::proto::Share::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::pool::proto::ClientStats::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (tag == 16) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }

      // optional uint32 version = 10;
      case 10: {
        if (tag == 80) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_height;
        break;
      }

      // optional uint32 height = 11;
      case 11: {
        if (tag == 88) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_reqnonce;
        break;
      }

      // optional bytes reqnonce = 12;
      case 12: {
        if (tag == 98) {
         parse_reqnonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqnonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_share;
        break;
      }

      // optional .pool.proto.Share share = 20;
      case 20: {
        if (tag == 162) {
         parse_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_stats;
        break;
      }

      // optional .pool.proto.ClientStats stats = 21;
      case 21: {
        if (tag == 170) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Request)
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // optional uint32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  // optional uint32 height = 11;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->height(), output);
  }

  // optional bytes reqnonce = 12;
  if (has_reqnonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->reqnonce(), output);
  }

  // optional .pool.proto.Share share = 20;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->share_, output);
  }

  // optional .pool.proto.ClientStats stats = 21;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->stats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Request)
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // optional uint32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  // optional uint32 height = 11;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->height(), target);
  }

  // optional bytes reqnonce = 12;
  if (has_reqnonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->reqnonce(), target);
  }

  // optional .pool.proto.Share share = 20;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->share_, target);
  }

  // optional .pool.proto.ClientStats stats = 21;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->stats_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Request)
  return target;
}

int Request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Request)
  int total_size = 0;

  if (has_type()) {
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_reqid()) {
    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());
  }

  return total_size;
}
int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Request)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124u) {
    // optional uint32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 height = 11;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional bytes reqnonce = 12;
    if (has_reqnonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqnonce());
    }

    // optional .pool.proto.Share share = 20;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->share_);
    }

    // optional .pool.proto.ClientStats stats = 21;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_reqnonce()) {
      set_has_reqnonce();
      reqnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reqnonce_);
    }
    if (from.has_share()) {
      mutable_share()->::pool::proto::Share::MergeFrom(from.share());
    }
    if (from.has_stats()) {
      mutable_stats()->::pool::proto::ClientStats::MergeFrom(from.stats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_share()) {
    if (!this->share_->IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(type_, other->type_);
  std::swap(reqid_, other->reqid_);
  std::swap(version_, other->version_);
  std::swap(height_, other->height_);
  reqnonce_.Swap(&other->reqnonce_);
  std::swap(share_, other->share_);
  std::swap(stats_, other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// required .pool.proto.Request.Type type = 1;
bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::pool::proto::Request_Type Request::type() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.type)
  return static_cast< ::pool::proto::Request_Type >(type_);
}
 void Request::set_type(::pool::proto::Request_Type value) {
  assert(::pool::proto::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Request.type)
}

// required uint32 reqid = 2;
bool Request::has_reqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_reqid() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
 ::google::protobuf::uint32 Request::reqid() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.reqid)
  return reqid_;
}
 void Request::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Request.reqid)
}

// optional uint32 version = 10;
bool Request::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 Request::version() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.version)
  return version_;
}
 void Request::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Request.version)
}

// optional uint32 height = 11;
bool Request::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 Request::height() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.height)
  return height_;
}
 void Request::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Request.height)
}

// optional bytes reqnonce = 12;
bool Request::has_reqnonce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_reqnonce() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_reqnonce() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_reqnonce() {
  reqnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reqnonce();
}
 const ::std::string& Request::reqnonce() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.reqnonce)
  return reqnonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_reqnonce(const ::std::string& value) {
  set_has_reqnonce();
  reqnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Request.reqnonce)
}
 void Request::set_reqnonce(const char* value) {
  set_has_reqnonce();
  reqnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Request.reqnonce)
}
 void Request::set_reqnonce(const void* value, size_t size) {
  set_has_reqnonce();
  reqnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Request.reqnonce)
}
 ::std::string* Request::mutable_reqnonce() {
  set_has_reqnonce();
  // @@protoc_insertion_point(field_mutable:pool.proto.Request.reqnonce)
  return reqnonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_reqnonce() {
  // @@protoc_insertion_point(field_release:pool.proto.Request.reqnonce)
  clear_has_reqnonce();
  return reqnonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_reqnonce(::std::string* reqnonce) {
  if (reqnonce != NULL) {
    set_has_reqnonce();
  } else {
    clear_has_reqnonce();
  }
  reqnonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reqnonce);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Request.reqnonce)
}

// optional .pool.proto.Share share = 20;
bool Request::has_share() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_share() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_share() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_share() {
  if (share_ != NULL) share_->::pool::proto::Share::Clear();
  clear_has_share();
}
const ::pool::proto::Share& Request::share() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.share)
  return share_ != NULL ? *share_ : *default_instance_->share_;
}
::pool::proto::Share* Request::mutable_share() {
  set_has_share();
  if (share_ == NULL) {
    share_ = new ::pool::proto::Share;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Request.share)
  return share_;
}
::pool::proto::Share* Request::release_share() {
  // @@protoc_insertion_point(field_release:pool.proto.Request.share)
  clear_has_share();
  ::pool::proto::Share* temp = share_;
  share_ = NULL;
  return temp;
}
void Request::set_allocated_share(::pool::proto::Share* share) {
  delete share_;
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Request.share)
}

// optional .pool.proto.ClientStats stats = 21;
bool Request::has_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_stats() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_stats() {
  if (stats_ != NULL) stats_->::pool::proto::ClientStats::Clear();
  clear_has_stats();
}
const ::pool::proto::ClientStats& Request::stats() const {
  // @@protoc_insertion_point(field_get:pool.proto.Request.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
::pool::proto::ClientStats* Request::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::pool::proto::ClientStats;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Request.stats)
  return stats_;
}
::pool::proto::ClientStats* Request::release_stats() {
  // @@protoc_insertion_point(field_release:pool.proto.Request.stats)
  clear_has_stats();
  ::pool::proto::ClientStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void Request::set_allocated_stats(::pool::proto::ClientStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Request.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kHostFieldNumber;
const int ServerInfo::kRouterFieldNumber;
const int ServerInfo::kPubFieldNumber;
const int ServerInfo::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  router_ = 0u;
  pub_ = 0u;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:pool.proto.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ServerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(router_, target_);
    if (has_host()) {
      host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ServerInfo.host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_router;
        break;
      }

      // required uint32 router = 2;
      case 2: {
        if (tag == 16) {
         parse_router:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_)));
          set_has_router();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pub;
        break;
      }

      // required uint32 pub = 3;
      case 3: {
        if (tag == 24) {
         parse_pub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pub_)));
          set_has_pub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // required uint32 target = 4;
      case 4: {
        if (tag == 32) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ServerInfo)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerInfo.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required uint32 router = 2;
  if (has_router()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->router(), output);
  }

  // required uint32 pub = 3;
  if (has_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pub(), output);
  }

  // required uint32 target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ServerInfo)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerInfo.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required uint32 router = 2;
  if (has_router()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->router(), target);
  }

  // required uint32 pub = 3;
  if (has_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pub(), target);
  }

  // required uint32 target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ServerInfo)
  return target;
}

int ServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ServerInfo)
  int total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_router()) {
    // required uint32 router = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->router());
  }

  if (has_pub()) {
    // required uint32 pub = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pub());
  }

  if (has_target()) {
    // required uint32 target = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());
  }

  return total_size;
}
int ServerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ServerInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required uint32 router = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->router());

    // required uint32 pub = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pub());

    // required uint32 target = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (from.has_router()) {
      set_router(from.router());
    }
    if (from.has_pub()) {
      set_pub(from.pub());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  host_.Swap(&other->host_);
  std::swap(router_, other->router_);
  std::swap(pub_, other->pub_);
  std::swap(target_, other->target_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// required string host = 1;
bool ServerInfo::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerInfo::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerInfo::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
 const ::std::string& ServerInfo::host() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerInfo.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerInfo::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.ServerInfo.host)
}
 void ServerInfo::set_host(const char* value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.ServerInfo.host)
}
 void ServerInfo::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.ServerInfo.host)
}
 ::std::string* ServerInfo::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:pool.proto.ServerInfo.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerInfo::release_host() {
  // @@protoc_insertion_point(field_release:pool.proto.ServerInfo.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerInfo::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.ServerInfo.host)
}

// required uint32 router = 2;
bool ServerInfo::has_router() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerInfo::set_has_router() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerInfo::clear_has_router() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerInfo::clear_router() {
  router_ = 0u;
  clear_has_router();
}
 ::google::protobuf::uint32 ServerInfo::router() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerInfo.router)
  return router_;
}
 void ServerInfo::set_router(::google::protobuf::uint32 value) {
  set_has_router();
  router_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerInfo.router)
}

// required uint32 pub = 3;
bool ServerInfo::has_pub() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerInfo::set_has_pub() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerInfo::clear_has_pub() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerInfo::clear_pub() {
  pub_ = 0u;
  clear_has_pub();
}
 ::google::protobuf::uint32 ServerInfo::pub() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerInfo.pub)
  return pub_;
}
 void ServerInfo::set_pub(::google::protobuf::uint32 value) {
  set_has_pub();
  pub_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerInfo.pub)
}

// required uint32 target = 4;
bool ServerInfo::has_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerInfo::set_has_target() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerInfo::clear_has_target() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerInfo::clear_target() {
  target_ = 0u;
  clear_has_target();
}
 ::google::protobuf::uint32 ServerInfo::target() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerInfo.target)
  return target_;
}
 void ServerInfo::set_target(::google::protobuf::uint32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerInfo.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Work::kHeightFieldNumber;
const int Work::kMerkleFieldNumber;
const int Work::kTimeFieldNumber;
const int Work::kBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Work::Work()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Work)
}

void Work::InitAsDefaultInstance() {
}

Work::Work(const Work& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Work)
}

void Work::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  height_ = 0u;
  merkle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  bits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Work::~Work() {
  // @@protoc_insertion_point(destructor:pool.proto.Work)
  SharedDtor();
}

void Work::SharedDtor() {
  merkle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Work::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Work::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Work_descriptor_;
}

const Work& Work::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Work* Work::default_instance_ = NULL;

Work* Work::New(::google::protobuf::Arena* arena) const {
  Work* n = new Work;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Work::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Work)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Work, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Work*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(height_, bits_);
    if (has_merkle()) {
      merkle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Work::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Work)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_merkle;
        break;
      }

      // required string merkle = 2;
      case 2: {
        if (tag == 18) {
         parse_merkle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->merkle().data(), this->merkle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Work.merkle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bits;
        break;
      }

      // required uint32 bits = 4;
      case 4: {
        if (tag == 32) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Work)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Work)
  return false;
#undef DO_
}

void Work::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Work)
  // required uint32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // required string merkle = 2;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Work.merkle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->merkle(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 bits = 4;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Work)
}

::google::protobuf::uint8* Work::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Work)
  // required uint32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // required string merkle = 2;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Work.merkle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->merkle(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 bits = 4;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Work)
  return target;
}

int Work::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Work)
  int total_size = 0;

  if (has_height()) {
    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_merkle()) {
    // required string merkle = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());
  }

  if (has_time()) {
    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_bits()) {
    // required uint32 bits = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());
  }

  return total_size;
}
int Work::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Work)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required string merkle = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());

    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 bits = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Work::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Work)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Work* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Work>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Work)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Work)
    MergeFrom(*source);
  }
}

void Work::MergeFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Work)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_merkle()) {
      set_has_merkle();
      merkle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Work::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work::CopyFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Work::Swap(Work* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Work::InternalSwap(Work* other) {
  std::swap(height_, other->height_);
  merkle_.Swap(&other->merkle_);
  std::swap(time_, other->time_);
  std::swap(bits_, other->bits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Work::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Work_descriptor_;
  metadata.reflection = Work_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Work

// required uint32 height = 1;
bool Work::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Work::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void Work::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void Work::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 Work::height() const {
  // @@protoc_insertion_point(field_get:pool.proto.Work.height)
  return height_;
}
 void Work::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Work.height)
}

// required string merkle = 2;
bool Work::has_merkle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Work::set_has_merkle() {
  _has_bits_[0] |= 0x00000002u;
}
void Work::clear_has_merkle() {
  _has_bits_[0] &= ~0x00000002u;
}
void Work::clear_merkle() {
  merkle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merkle();
}
 const ::std::string& Work::merkle() const {
  // @@protoc_insertion_point(field_get:pool.proto.Work.merkle)
  return merkle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Work::set_merkle(const ::std::string& value) {
  set_has_merkle();
  merkle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Work.merkle)
}
 void Work::set_merkle(const char* value) {
  set_has_merkle();
  merkle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Work.merkle)
}
 void Work::set_merkle(const char* value, size_t size) {
  set_has_merkle();
  merkle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Work.merkle)
}
 ::std::string* Work::mutable_merkle() {
  set_has_merkle();
  // @@protoc_insertion_point(field_mutable:pool.proto.Work.merkle)
  return merkle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Work::release_merkle() {
  // @@protoc_insertion_point(field_release:pool.proto.Work.merkle)
  clear_has_merkle();
  return merkle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Work::set_allocated_merkle(::std::string* merkle) {
  if (merkle != NULL) {
    set_has_merkle();
  } else {
    clear_has_merkle();
  }
  merkle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Work.merkle)
}

// required uint32 time = 3;
bool Work::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Work::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Work::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Work::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 Work::time() const {
  // @@protoc_insertion_point(field_get:pool.proto.Work.time)
  return time_;
}
 void Work::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Work.time)
}

// required uint32 bits = 4;
bool Work::has_bits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Work::set_has_bits() {
  _has_bits_[0] |= 0x00000008u;
}
void Work::clear_has_bits() {
  _has_bits_[0] &= ~0x00000008u;
}
void Work::clear_bits() {
  bits_ = 0u;
  clear_has_bits();
}
 ::google::protobuf::uint32 Work::bits() const {
  // @@protoc_insertion_point(field_get:pool.proto.Work.bits)
  return bits_;
}
 void Work::set_bits(::google::protobuf::uint32 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Work.bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Reply_ErrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_ErrType_descriptor_;
}
bool Reply_ErrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_ErrType Reply::NONE;
const Reply_ErrType Reply::VERSION;
const Reply_ErrType Reply::HEIGHT;
const Reply_ErrType Reply::REQNONCE;
const Reply_ErrType Reply::STALE;
const Reply_ErrType Reply::INVALID;
const Reply_ErrType Reply::DUPLICATE;
const Reply_ErrType Reply::ErrType_MIN;
const Reply_ErrType Reply::ErrType_MAX;
const int Reply::ErrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kTypeFieldNumber;
const int Reply::kReqidFieldNumber;
const int Reply::kErrorFieldNumber;
const int Reply::kErrstrFieldNumber;
const int Reply::kSinfoFieldNumber;
const int Reply::kWorkFieldNumber;
const int Reply::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Reply)
}

void Reply::InitAsDefaultInstance() {
  sinfo_ = const_cast< ::pool::proto::ServerInfo*>(&::pool::proto::ServerInfo::default_instance());
  work_ = const_cast< ::pool::proto::Work*>(&::pool::proto::Work::default_instance());
  block_ = const_cast< ::pool::proto::Block*>(&::pool::proto::Block::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Reply)
}

void Reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  reqid_ = 0u;
  error_ = 0;
  errstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinfo_ = NULL;
  work_ = NULL;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:pool.proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  errstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete sinfo_;
    delete work_;
    delete block_;
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New(::google::protobuf::Arena* arena) const {
  Reply* n = new Reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Reply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Reply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Reply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(type_, reqid_);
    error_ = 0;
    if (has_errstr()) {
      errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sinfo()) {
      if (sinfo_ != NULL) sinfo_->::pool::proto::ServerInfo::Clear();
    }
    if (has_work()) {
      if (work_ != NULL) work_->::pool::proto::Work::Clear();
    }
    if (has_block()) {
      if (block_ != NULL) block_->::pool::proto::Block::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (tag == 16) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_error;
        break;
      }

      // required .pool.proto.Reply.ErrType error = 10;
      case 10: {
        if (tag == 80) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Reply_ErrType_IsValid(value)) {
            set_error(static_cast< ::pool::proto::Reply_ErrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_errstr;
        break;
      }

      // optional string errstr = 11;
      case 11: {
        if (tag == 90) {
         parse_errstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errstr().data(), this->errstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Reply.errstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_sinfo;
        break;
      }

      // optional .pool.proto.ServerInfo sinfo = 20;
      case 20: {
        if (tag == 162) {
         parse_sinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_work;
        break;
      }

      // optional .pool.proto.Work work = 21;
      case 21: {
        if (tag == 170) {
         parse_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_block;
        break;
      }

      // optional .pool.proto.Block block = 22;
      case 22: {
        if (tag == 178) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Reply)
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // required .pool.proto.Reply.ErrType error = 10;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->error(), output);
  }

  // optional string errstr = 11;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Reply.errstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->errstr(), output);
  }

  // optional .pool.proto.ServerInfo sinfo = 20;
  if (has_sinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->sinfo_, output);
  }

  // optional .pool.proto.Work work = 21;
  if (has_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->work_, output);
  }

  // optional .pool.proto.Block block = 22;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->block_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Reply)
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // required .pool.proto.Reply.ErrType error = 10;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->error(), target);
  }

  // optional string errstr = 11;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Reply.errstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->errstr(), target);
  }

  // optional .pool.proto.ServerInfo sinfo = 20;
  if (has_sinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->sinfo_, target);
  }

  // optional .pool.proto.Work work = 21;
  if (has_work()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->work_, target);
  }

  // optional .pool.proto.Block block = 22;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->block_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Reply)
  return target;
}

int Reply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Reply)
  int total_size = 0;

  if (has_type()) {
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_reqid()) {
    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());
  }

  if (has_error()) {
    // required .pool.proto.Reply.ErrType error = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
int Reply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Reply)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());

    // required .pool.proto.Reply.ErrType error = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 120u) {
    // optional string errstr = 11;
    if (has_errstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

    // optional .pool.proto.ServerInfo sinfo = 20;
    if (has_sinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sinfo_);
    }

    // optional .pool.proto.Work work = 21;
    if (has_work()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_);
    }

    // optional .pool.proto.Block block = 22;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->block_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Reply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_errstr()) {
      set_has_errstr();
      errstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errstr_);
    }
    if (from.has_sinfo()) {
      mutable_sinfo()->::pool::proto::ServerInfo::MergeFrom(from.sinfo());
    }
    if (from.has_work()) {
      mutable_work()->::pool::proto::Work::MergeFrom(from.work());
    }
    if (from.has_block()) {
      mutable_block()->::pool::proto::Block::MergeFrom(from.block());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sinfo()) {
    if (!this->sinfo_->IsInitialized()) return false;
  }
  if (has_work()) {
    if (!this->work_->IsInitialized()) return false;
  }
  if (has_block()) {
    if (!this->block_->IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  std::swap(type_, other->type_);
  std::swap(reqid_, other->reqid_);
  std::swap(error_, other->error_);
  errstr_.Swap(&other->errstr_);
  std::swap(sinfo_, other->sinfo_);
  std::swap(work_, other->work_);
  std::swap(block_, other->block_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reply

// required .pool.proto.Request.Type type = 1;
bool Reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Reply::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::pool::proto::Request_Type Reply::type() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.type)
  return static_cast< ::pool::proto::Request_Type >(type_);
}
 void Reply::set_type(::pool::proto::Request_Type value) {
  assert(::pool::proto::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Reply.type)
}

// required uint32 reqid = 2;
bool Reply::has_reqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Reply::set_has_reqid() {
  _has_bits_[0] |= 0x00000002u;
}
void Reply::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Reply::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
 ::google::protobuf::uint32 Reply::reqid() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.reqid)
  return reqid_;
}
 void Reply::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Reply.reqid)
}

// required .pool.proto.Reply.ErrType error = 10;
bool Reply::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Reply::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void Reply::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void Reply::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::pool::proto::Reply_ErrType Reply::error() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.error)
  return static_cast< ::pool::proto::Reply_ErrType >(error_);
}
 void Reply::set_error(::pool::proto::Reply_ErrType value) {
  assert(::pool::proto::Reply_ErrType_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.Reply.error)
}

// optional string errstr = 11;
bool Reply::has_errstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Reply::set_has_errstr() {
  _has_bits_[0] |= 0x00000008u;
}
void Reply::clear_has_errstr() {
  _has_bits_[0] &= ~0x00000008u;
}
void Reply::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errstr();
}
 const ::std::string& Reply::errstr() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.errstr)
  return errstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_errstr(const ::std::string& value) {
  set_has_errstr();
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.Reply.errstr)
}
 void Reply::set_errstr(const char* value) {
  set_has_errstr();
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.Reply.errstr)
}
 void Reply::set_errstr(const char* value, size_t size) {
  set_has_errstr();
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.Reply.errstr)
}
 ::std::string* Reply::mutable_errstr() {
  set_has_errstr();
  // @@protoc_insertion_point(field_mutable:pool.proto.Reply.errstr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reply::release_errstr() {
  // @@protoc_insertion_point(field_release:pool.proto.Reply.errstr)
  clear_has_errstr();
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    set_has_errstr();
  } else {
    clear_has_errstr();
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Reply.errstr)
}

// optional .pool.proto.ServerInfo sinfo = 20;
bool Reply::has_sinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Reply::set_has_sinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void Reply::clear_has_sinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void Reply::clear_sinfo() {
  if (sinfo_ != NULL) sinfo_->::pool::proto::ServerInfo::Clear();
  clear_has_sinfo();
}
const ::pool::proto::ServerInfo& Reply::sinfo() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.sinfo)
  return sinfo_ != NULL ? *sinfo_ : *default_instance_->sinfo_;
}
::pool::proto::ServerInfo* Reply::mutable_sinfo() {
  set_has_sinfo();
  if (sinfo_ == NULL) {
    sinfo_ = new ::pool::proto::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Reply.sinfo)
  return sinfo_;
}
::pool::proto::ServerInfo* Reply::release_sinfo() {
  // @@protoc_insertion_point(field_release:pool.proto.Reply.sinfo)
  clear_has_sinfo();
  ::pool::proto::ServerInfo* temp = sinfo_;
  sinfo_ = NULL;
  return temp;
}
void Reply::set_allocated_sinfo(::pool::proto::ServerInfo* sinfo) {
  delete sinfo_;
  sinfo_ = sinfo;
  if (sinfo) {
    set_has_sinfo();
  } else {
    clear_has_sinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Reply.sinfo)
}

// optional .pool.proto.Work work = 21;
bool Reply::has_work() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Reply::set_has_work() {
  _has_bits_[0] |= 0x00000020u;
}
void Reply::clear_has_work() {
  _has_bits_[0] &= ~0x00000020u;
}
void Reply::clear_work() {
  if (work_ != NULL) work_->::pool::proto::Work::Clear();
  clear_has_work();
}
const ::pool::proto::Work& Reply::work() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.work)
  return work_ != NULL ? *work_ : *default_instance_->work_;
}
::pool::proto::Work* Reply::mutable_work() {
  set_has_work();
  if (work_ == NULL) {
    work_ = new ::pool::proto::Work;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Reply.work)
  return work_;
}
::pool::proto::Work* Reply::release_work() {
  // @@protoc_insertion_point(field_release:pool.proto.Reply.work)
  clear_has_work();
  ::pool::proto::Work* temp = work_;
  work_ = NULL;
  return temp;
}
void Reply::set_allocated_work(::pool::proto::Work* work) {
  delete work_;
  work_ = work;
  if (work) {
    set_has_work();
  } else {
    clear_has_work();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Reply.work)
}

// optional .pool.proto.Block block = 22;
bool Reply::has_block() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Reply::set_has_block() {
  _has_bits_[0] |= 0x00000040u;
}
void Reply::clear_has_block() {
  _has_bits_[0] &= ~0x00000040u;
}
void Reply::clear_block() {
  if (block_ != NULL) block_->::pool::proto::Block::Clear();
  clear_has_block();
}
const ::pool::proto::Block& Reply::block() const {
  // @@protoc_insertion_point(field_get:pool.proto.Reply.block)
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
::pool::proto::Block* Reply::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    block_ = new ::pool::proto::Block;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Reply.block)
  return block_;
}
::pool::proto::Block* Reply::release_block() {
  // @@protoc_insertion_point(field_release:pool.proto.Reply.block)
  clear_has_block();
  ::pool::proto::Block* temp = block_;
  block_ = NULL;
  return temp;
}
void Reply::set_allocated_block(::pool::proto::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Reply.block)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqStats::kReqtypeFieldNumber;
const int ReqStats::kErrtypeFieldNumber;
const int ReqStats::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqStats::ReqStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ReqStats)
}

void ReqStats::InitAsDefaultInstance() {
}

ReqStats::ReqStats(const ReqStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.ReqStats)
}

void ReqStats::SharedCtor() {
  _cached_size_ = 0;
  reqtype_ = 0;
  errtype_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqStats::~ReqStats() {
  // @@protoc_insertion_point(destructor:pool.proto.ReqStats)
  SharedDtor();
}

void ReqStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqStats_descriptor_;
}

const ReqStats& ReqStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ReqStats* ReqStats::default_instance_ = NULL;

ReqStats* ReqStats::New(::google::protobuf::Arena* arena) const {
  ReqStats* n = new ReqStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ReqStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reqtype_, count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ReqStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type reqtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_reqtype(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errtype;
        break;
      }

      // required .pool.proto.Reply.ErrType errtype = 2;
      case 2: {
        if (tag == 16) {
         parse_errtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Reply_ErrType_IsValid(value)) {
            set_errtype(static_cast< ::pool::proto::Reply_ErrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ReqStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ReqStats)
  return false;
#undef DO_
}

void ReqStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ReqStats)
  // required .pool.proto.Request.Type reqtype = 1;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reqtype(), output);
  }

  // required .pool.proto.Reply.ErrType errtype = 2;
  if (has_errtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errtype(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ReqStats)
}

::google::protobuf::uint8* ReqStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ReqStats)
  // required .pool.proto.Request.Type reqtype = 1;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reqtype(), target);
  }

  // required .pool.proto.Reply.ErrType errtype = 2;
  if (has_errtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errtype(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ReqStats)
  return target;
}

int ReqStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ReqStats)
  int total_size = 0;

  if (has_reqtype()) {
    // required .pool.proto.Request.Type reqtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqtype());
  }

  if (has_errtype()) {
    // required .pool.proto.Reply.ErrType errtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errtype());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
int ReqStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ReqStats)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pool.proto.Request.Type reqtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqtype());

    // required .pool.proto.Reply.ErrType errtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errtype());

    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ReqStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReqStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ReqStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ReqStats)
    MergeFrom(*source);
  }
}

void ReqStats::MergeFrom(const ReqStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ReqStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_errtype()) {
      set_errtype(from.errtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ReqStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStats::CopyFrom(const ReqStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ReqStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqStats::Swap(ReqStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqStats::InternalSwap(ReqStats* other) {
  std::swap(reqtype_, other->reqtype_);
  std::swap(errtype_, other->errtype_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqStats_descriptor_;
  metadata.reflection = ReqStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqStats

// required .pool.proto.Request.Type reqtype = 1;
bool ReqStats::has_reqtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqStats::set_has_reqtype() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqStats::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqStats::clear_reqtype() {
  reqtype_ = 0;
  clear_has_reqtype();
}
 ::pool::proto::Request_Type ReqStats::reqtype() const {
  // @@protoc_insertion_point(field_get:pool.proto.ReqStats.reqtype)
  return static_cast< ::pool::proto::Request_Type >(reqtype_);
}
 void ReqStats::set_reqtype(::pool::proto::Request_Type value) {
  assert(::pool::proto::Request_Type_IsValid(value));
  set_has_reqtype();
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ReqStats.reqtype)
}

// required .pool.proto.Reply.ErrType errtype = 2;
bool ReqStats::has_errtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqStats::set_has_errtype() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqStats::clear_has_errtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqStats::clear_errtype() {
  errtype_ = 0;
  clear_has_errtype();
}
 ::pool::proto::Reply_ErrType ReqStats::errtype() const {
  // @@protoc_insertion_point(field_get:pool.proto.ReqStats.errtype)
  return static_cast< ::pool::proto::Reply_ErrType >(errtype_);
}
 void ReqStats::set_errtype(::pool::proto::Reply_ErrType value) {
  assert(::pool::proto::Reply_ErrType_IsValid(value));
  set_has_errtype();
  errtype_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ReqStats.errtype)
}

// required uint32 count = 3;
bool ReqStats::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqStats::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqStats::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqStats::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 ReqStats::count() const {
  // @@protoc_insertion_point(field_get:pool.proto.ReqStats.count)
  return count_;
}
 void ReqStats::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ReqStats.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStats::kNameFieldNumber;
const int ServerStats::kThreadFieldNumber;
const int ServerStats::kWorkersFieldNumber;
const int ServerStats::kLatencyFieldNumber;
const int ServerStats::kCpdFieldNumber;
const int ServerStats::kReqstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStats::ServerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ServerStats)
}

void ServerStats::InitAsDefaultInstance() {
}

ServerStats::ServerStats(const ServerStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.ServerStats)
}

void ServerStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_ = 0u;
  workers_ = 0u;
  latency_ = 0u;
  cpd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats::~ServerStats() {
  // @@protoc_insertion_point(destructor:pool.proto.ServerStats)
  SharedDtor();
}

void ServerStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_descriptor_;
}

const ServerStats& ServerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ServerStats* ServerStats::default_instance_ = NULL;

ServerStats* ServerStats::New(::google::protobuf::Arena* arena) const {
  ServerStats* n = new ServerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ServerStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(thread_, cpd_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  reqstats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ServerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ServerStats.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_thread;
        break;
      }

      // required uint32 thread = 2;
      case 2: {
        if (tag == 16) {
         parse_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_)));
          set_has_thread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_workers;
        break;
      }

      // required uint32 workers = 10;
      case 10: {
        if (tag == 80) {
         parse_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workers_)));
          set_has_workers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_latency;
        break;
      }

      // required uint32 latency = 11;
      case 11: {
        if (tag == 88) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_cpd;
        break;
      }

      // required float cpd = 12;
      case 12: {
        if (tag == 101) {
         parse_cpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpd_)));
          set_has_cpd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_reqstats;
        break;
      }

      // repeated .pool.proto.ReqStats reqstats = 20;
      case 20: {
        if (tag == 162) {
         parse_reqstats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_reqstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reqstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_reqstats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ServerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ServerStats)
  return false;
#undef DO_
}

void ServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ServerStats)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 thread = 2;
  if (has_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread(), output);
  }

  // required uint32 workers = 10;
  if (has_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->workers(), output);
  }

  // required uint32 latency = 11;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->latency(), output);
  }

  // required float cpd = 12;
  if (has_cpd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cpd(), output);
  }

  // repeated .pool.proto.ReqStats reqstats = 20;
  for (unsigned int i = 0, n = this->reqstats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->reqstats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ServerStats)
}

::google::protobuf::uint8* ServerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ServerStats)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 thread = 2;
  if (has_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread(), target);
  }

  // required uint32 workers = 10;
  if (has_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->workers(), target);
  }

  // required uint32 latency = 11;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->latency(), target);
  }

  // required float cpd = 12;
  if (has_cpd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cpd(), target);
  }

  // repeated .pool.proto.ReqStats reqstats = 20;
  for (unsigned int i = 0, n = this->reqstats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->reqstats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ServerStats)
  return target;
}

int ServerStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ServerStats)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_thread()) {
    // required uint32 thread = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread());
  }

  if (has_workers()) {
    // required uint32 workers = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->workers());
  }

  if (has_latency()) {
    // required uint32 latency = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  if (has_cpd()) {
    // required float cpd = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
int ServerStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ServerStats)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 thread = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread());

    // required uint32 workers = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->workers());

    // required uint32 latency = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());

    // required float cpd = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .pool.proto.ReqStats reqstats = 20;
  total_size += 2 * this->reqstats_size();
  for (int i = 0; i < this->reqstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reqstats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ServerStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ServerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ServerStats)
    MergeFrom(*source);
  }
}

void ServerStats::MergeFrom(const ServerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ServerStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  reqstats_.MergeFrom(from.reqstats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_thread()) {
      set_thread(from.thread());
    }
    if (from.has_workers()) {
      set_workers(from.workers());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
    if (from.has_cpd()) {
      set_cpd(from.cpd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ServerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats::CopyFrom(const ServerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ServerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reqstats())) return false;
  return true;
}

void ServerStats::Swap(ServerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStats::InternalSwap(ServerStats* other) {
  name_.Swap(&other->name_);
  std::swap(thread_, other->thread_);
  std::swap(workers_, other->workers_);
  std::swap(latency_, other->latency_);
  std::swap(cpd_, other->cpd_);
  reqstats_.UnsafeArenaSwap(&other->reqstats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_descriptor_;
  metadata.reflection = ServerStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStats

// required string name = 1;
bool ServerStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerStats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ServerStats::name() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerStats.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pool.proto.ServerStats.name)
}
 void ServerStats::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pool.proto.ServerStats.name)
}
 void ServerStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pool.proto.ServerStats.name)
}
 ::std::string* ServerStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pool.proto.ServerStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerStats::release_name() {
  // @@protoc_insertion_point(field_release:pool.proto.ServerStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pool.proto.ServerStats.name)
}

// required uint32 thread = 2;
bool ServerStats::has_thread() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerStats::set_has_thread() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerStats::clear_has_thread() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerStats::clear_thread() {
  thread_ = 0u;
  clear_has_thread();
}
 ::google::protobuf::uint32 ServerStats::thread() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerStats.thread)
  return thread_;
}
 void ServerStats::set_thread(::google::protobuf::uint32 value) {
  set_has_thread();
  thread_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerStats.thread)
}

// required uint32 workers = 10;
bool ServerStats::has_workers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerStats::set_has_workers() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerStats::clear_has_workers() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerStats::clear_workers() {
  workers_ = 0u;
  clear_has_workers();
}
 ::google::protobuf::uint32 ServerStats::workers() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerStats.workers)
  return workers_;
}
 void ServerStats::set_workers(::google::protobuf::uint32 value) {
  set_has_workers();
  workers_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerStats.workers)
}

// required uint32 latency = 11;
bool ServerStats::has_latency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerStats::set_has_latency() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerStats::clear_has_latency() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerStats::clear_latency() {
  latency_ = 0u;
  clear_has_latency();
}
 ::google::protobuf::uint32 ServerStats::latency() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerStats.latency)
  return latency_;
}
 void ServerStats::set_latency(::google::protobuf::uint32 value) {
  set_has_latency();
  latency_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerStats.latency)
}

// required float cpd = 12;
bool ServerStats::has_cpd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerStats::set_has_cpd() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerStats::clear_has_cpd() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerStats::clear_cpd() {
  cpd_ = 0;
  clear_has_cpd();
}
 float ServerStats::cpd() const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerStats.cpd)
  return cpd_;
}
 void ServerStats::set_cpd(float value) {
  set_has_cpd();
  cpd_ = value;
  // @@protoc_insertion_point(field_set:pool.proto.ServerStats.cpd)
}

// repeated .pool.proto.ReqStats reqstats = 20;
int ServerStats::reqstats_size() const {
  return reqstats_.size();
}
void ServerStats::clear_reqstats() {
  reqstats_.Clear();
}
const ::pool::proto::ReqStats& ServerStats::reqstats(int index) const {
  // @@protoc_insertion_point(field_get:pool.proto.ServerStats.reqstats)
  return reqstats_.Get(index);
}
::pool::proto::ReqStats* ServerStats::mutable_reqstats(int index) {
  // @@protoc_insertion_point(field_mutable:pool.proto.ServerStats.reqstats)
  return reqstats_.Mutable(index);
}
::pool::proto::ReqStats* ServerStats::add_reqstats() {
  // @@protoc_insertion_point(field_add:pool.proto.ServerStats.reqstats)
  return reqstats_.Add();
}
::google::protobuf::RepeatedPtrField< ::pool::proto::ReqStats >*
ServerStats::mutable_reqstats() {
  // @@protoc_insertion_point(field_mutable_list:pool.proto.ServerStats.reqstats)
  return &reqstats_;
}
const ::google::protobuf::RepeatedPtrField< ::pool::proto::ReqStats >&
ServerStats::reqstats() const {
  // @@protoc_insertion_point(field_list:pool.proto.ServerStats.reqstats)
  return reqstats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kShareFieldNumber;
const int Data::kClientstatsFieldNumber;
const int Data::kServerstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Data)
}

void Data::InitAsDefaultInstance() {
  share_ = const_cast< ::pool::proto::Share*>(&::pool::proto::Share::default_instance());
  clientstats_ = const_cast< ::pool::proto::ClientStats*>(&::pool::proto::ClientStats::default_instance());
  serverstats_ = const_cast< ::pool::proto::ServerStats*>(&::pool::proto::ServerStats::default_instance());
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pool.proto.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  share_ = NULL;
  clientstats_ = NULL;
  serverstats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:pool.proto.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
    delete share_;
    delete clientstats_;
    delete serverstats_;
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Data)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_share()) {
      if (share_ != NULL) share_->::pool::proto::Share::Clear();
    }
    if (has_clientstats()) {
      if (clientstats_ != NULL) clientstats_->::pool::proto::ClientStats::Clear();
    }
    if (has_serverstats()) {
      if (serverstats_ != NULL) serverstats_->::pool::proto::ServerStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pool.proto.Share share = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clientstats;
        break;
      }

      // optional .pool.proto.ClientStats clientstats = 2;
      case 2: {
        if (tag == 18) {
         parse_clientstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serverstats;
        break;
      }

      // optional .pool.proto.ServerStats serverstats = 3;
      case 3: {
        if (tag == 26) {
         parse_serverstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Data)
  // optional .pool.proto.Share share = 1;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->share_, output);
  }

  // optional .pool.proto.ClientStats clientstats = 2;
  if (has_clientstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clientstats_, output);
  }

  // optional .pool.proto.ServerStats serverstats = 3;
  if (has_serverstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->serverstats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Data)
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Data)
  // optional .pool.proto.Share share = 1;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->share_, target);
  }

  // optional .pool.proto.ClientStats clientstats = 2;
  if (has_clientstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->clientstats_, target);
  }

  // optional .pool.proto.ServerStats serverstats = 3;
  if (has_serverstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->serverstats_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Data)
  return target;
}

int Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Data)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .pool.proto.Share share = 1;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->share_);
    }

    // optional .pool.proto.ClientStats clientstats = 2;
    if (has_clientstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clientstats_);
    }

    // optional .pool.proto.ServerStats serverstats = 3;
    if (has_serverstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->serverstats_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share()) {
      mutable_share()->::pool::proto::Share::MergeFrom(from.share());
    }
    if (from.has_clientstats()) {
      mutable_clientstats()->::pool::proto::ClientStats::MergeFrom(from.clientstats());
    }
    if (from.has_serverstats()) {
      mutable_serverstats()->::pool::proto::ServerStats::MergeFrom(from.serverstats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  if (has_share()) {
    if (!this->share_->IsInitialized()) return false;
  }
  if (has_clientstats()) {
    if (!this->clientstats_->IsInitialized()) return false;
  }
  if (has_serverstats()) {
    if (!this->serverstats_->IsInitialized()) return false;
  }
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  std::swap(share_, other->share_);
  std::swap(clientstats_, other->clientstats_);
  std::swap(serverstats_, other->serverstats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional .pool.proto.Share share = 1;
bool Data::has_share() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Data::set_has_share() {
  _has_bits_[0] |= 0x00000001u;
}
void Data::clear_has_share() {
  _has_bits_[0] &= ~0x00000001u;
}
void Data::clear_share() {
  if (share_ != NULL) share_->::pool::proto::Share::Clear();
  clear_has_share();
}
const ::pool::proto::Share& Data::share() const {
  // @@protoc_insertion_point(field_get:pool.proto.Data.share)
  return share_ != NULL ? *share_ : *default_instance_->share_;
}
::pool::proto::Share* Data::mutable_share() {
  set_has_share();
  if (share_ == NULL) {
    share_ = new ::pool::proto::Share;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Data.share)
  return share_;
}
::pool::proto::Share* Data::release_share() {
  // @@protoc_insertion_point(field_release:pool.proto.Data.share)
  clear_has_share();
  ::pool::proto::Share* temp = share_;
  share_ = NULL;
  return temp;
}
void Data::set_allocated_share(::pool::proto::Share* share) {
  delete share_;
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Data.share)
}

// optional .pool.proto.ClientStats clientstats = 2;
bool Data::has_clientstats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Data::set_has_clientstats() {
  _has_bits_[0] |= 0x00000002u;
}
void Data::clear_has_clientstats() {
  _has_bits_[0] &= ~0x00000002u;
}
void Data::clear_clientstats() {
  if (clientstats_ != NULL) clientstats_->::pool::proto::ClientStats::Clear();
  clear_has_clientstats();
}
const ::pool::proto::ClientStats& Data::clientstats() const {
  // @@protoc_insertion_point(field_get:pool.proto.Data.clientstats)
  return clientstats_ != NULL ? *clientstats_ : *default_instance_->clientstats_;
}
::pool::proto::ClientStats* Data::mutable_clientstats() {
  set_has_clientstats();
  if (clientstats_ == NULL) {
    clientstats_ = new ::pool::proto::ClientStats;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Data.clientstats)
  return clientstats_;
}
::pool::proto::ClientStats* Data::release_clientstats() {
  // @@protoc_insertion_point(field_release:pool.proto.Data.clientstats)
  clear_has_clientstats();
  ::pool::proto::ClientStats* temp = clientstats_;
  clientstats_ = NULL;
  return temp;
}
void Data::set_allocated_clientstats(::pool::proto::ClientStats* clientstats) {
  delete clientstats_;
  clientstats_ = clientstats;
  if (clientstats) {
    set_has_clientstats();
  } else {
    clear_has_clientstats();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Data.clientstats)
}

// optional .pool.proto.ServerStats serverstats = 3;
bool Data::has_serverstats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Data::set_has_serverstats() {
  _has_bits_[0] |= 0x00000004u;
}
void Data::clear_has_serverstats() {
  _has_bits_[0] &= ~0x00000004u;
}
void Data::clear_serverstats() {
  if (serverstats_ != NULL) serverstats_->::pool::proto::ServerStats::Clear();
  clear_has_serverstats();
}
const ::pool::proto::ServerStats& Data::serverstats() const {
  // @@protoc_insertion_point(field_get:pool.proto.Data.serverstats)
  return serverstats_ != NULL ? *serverstats_ : *default_instance_->serverstats_;
}
::pool::proto::ServerStats* Data::mutable_serverstats() {
  set_has_serverstats();
  if (serverstats_ == NULL) {
    serverstats_ = new ::pool::proto::ServerStats;
  }
  // @@protoc_insertion_point(field_mutable:pool.proto.Data.serverstats)
  return serverstats_;
}
::pool::proto::ServerStats* Data::release_serverstats() {
  // @@protoc_insertion_point(field_release:pool.proto.Data.serverstats)
  clear_has_serverstats();
  ::pool::proto::ServerStats* temp = serverstats_;
  serverstats_ = NULL;
  return temp;
}
void Data::set_allocated_serverstats(::pool::proto::ServerStats* serverstats) {
  delete serverstats_;
  serverstats_ = serverstats;
  if (serverstats) {
    set_has_serverstats();
  } else {
    clear_has_serverstats();
  }
  // @@protoc_insertion_point(field_set_allocated:pool.proto.Data.serverstats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pool

// @@protoc_insertion_point(global_scope)
